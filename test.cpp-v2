#include "NuFuncs.h"
#include <iostream>
#include <chrono>
#include "TGraph2D.h"
#include "TCanvas.h"
#include "TApplication.h"
#include "TH2D.h"
#include <TGraph.h>
#include <Math/Interpolator.h>
#include <Math/InterpolationTypes.h>
#include "TFile.h"
#include "TDirectory.h"
#include "TROOT.h"
#include "TMath.h"

std::vector<TGraph*> GetContour(TCanvas* canvas,TH2D* hLikelihood, Double_t upValue)
{
  std::vector<TGraph*> grVec;
  double minLike = hLikelihood->GetBinContent( hLikelihood->GetMinimumBin() );
  hLikelihood->SetContour(1);
  hLikelihood->SetContourLevel(0, minLike + upValue);
  TDirectory* save = gDirectory;
  hLikelihood->Draw("CONTLIST SAME");
  canvas->Update();
  TObjArray* contArr = (TObjArray*)gROOT->GetListOfSpecials()->FindObject("contours");
  TList* contList = (TList*)contArr->At(0);
  TIter next(contList);
  while ( TGraph* gr = (TGraph*)next() )
    {
      grVec.push_back( (TGraph*)gr->Clone() );
    }
  gDirectory = save;

  return grVec;
}




int main(int argc, char** argv){

  auto start = std::chrono::high_resolution_clock::now();
  
  NuFuncs df1(1);
  NuFuncs df2(1);
  df1.putIntoDF("invertedOrder.txt",1);
  df2.putIntoDF("invertedOrder.txt",7);
  TGraph2D* G = new TGraph2D(df2.xData.size(), &(df2.xData[0]),&(df2.yData[0]),&(df2.chiSq[0]));
  df1.kDTree();

  int nbinx = 100;
  int nbiny = 100;
  double xlow = 0.42;
  double xhigh = 0.6;

  double y1low = -2.62;
  double y1high = -2.45;
  //double ylow = 2.45;
  //double yhigh = 2.62;

  TH2D* T2Dplot = new TH2D("T2DPlot","T23 vs DMA Invorder 2D",nbinx,xlow,xhigh,nbiny,y1low,y1high);
  TH2D* T3Dplot = new TH2D("T3DPlot","T23 vs DMA Invorder 3D",nbinx,xlow,xhigh,nbiny,y1low,y1high);

  
  double* xbinList = new double[nbinx];
  double* ybinList = new double[nbiny];  

  for(int i = 0; i < nbinx; i++){
    xbinList[i] = T2Dplot->GetXaxis()->GetBinCenter(i+1);
  }
  for(int i = 0; i < nbiny; i++){
    ybinList[i] = T2Dplot->GetYaxis()->GetBinCenter(i+1);
  }

  //std::cout << "check 2\n"; 

  float spacing = 5;
  double Err = 0;
  double avgE = 0;
  double maxErr = 0;
  int maxi,maxj = 0;
  for(int i = 0; i < nbinx; i++){
    for(int j = 0; j < nbiny; j++){

      double val = G->Interpolate(xbinList[i],ybinList[j]);
      T2Dplot->SetBinContent(i + 1, j + 1, val);
      
      double DCP = -180;
      double dp[3] = {xbinList[i],ybinList[j],0};
      //double dp[3] = {0.546,2.535,0};
      double minChi = 1000000;
      double ChiSq = 0;
      
      while(DCP <= 175){
	dp[2] = DCP;
	ChiSq = df1.threeDI(dp);
	if(minChi > ChiSq ) minChi = ChiSq;
	
	//std::cout << DCP << " " <<ChiSq << " " <<Err <<"\n";
	DCP += spacing;
      }
      //std::cout << minChi << " ";
      T3Dplot->SetBinContent(i + 1, j + 1, minChi);
      Err = std::abs(minChi - val)/val;
      avgE += Err;
      if(Err > maxErr){
	maxErr = Err;
	maxi = i;
	maxj = j;
      }
    }
    //std::cout<< "\n\n";
    }
  //std::cout << maxErr << " " <<xbinList[maxi]<<" " <<ybinList[maxj]<<"\n";
  std::cout << avgE/(nbinx * nbiny) << "\n";
  
  auto end = std::chrono::high_resolution_clock::now();
  auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
  
  std::cout << "Execution time: " << duration.count() << " ms" << std::endl;
  
  //delete df1.tree;
  delete[] xbinList;
  delete[] ybinList;

  //std::cout << "check 3\n"; 
  T2Dplot->GetXaxis()->SetTitle("T23");
  T2Dplot->GetYaxis()->SetTitle("DMA");
  

  T3Dplot->GetXaxis()->SetTitle("T23");
  T3Dplot->GetYaxis()->SetTitle("DMA");
  
  double up68 = TMath::ChisquareQuantile(0.68,2);
  double up90 = TMath::ChisquareQuantile(0.9,2);
  double up95 = TMath::ChisquareQuantile(0.95,2);
  double up99 = TMath::ChisquareQuantile(0.99,2);
  /*
  std::vector<TGraph*> threeD;
  twoD = GetContour(T2Dplot,up90);
  threeD = GetContour(T3Dplot,up90);*/
  
  
  TFile* file2D = new TFile("2DOutput.root","recreate");
  T2Dplot->Write();
  file2D->Close();

  TFile* file3D = new TFile("3DOutput.root","recreate");
  T3Dplot->Write();
  file3D->Close();

  
  //T3Dplot->Draw("COLZ");

  
  TApplication app("app", &argc, argv);

  Double_t w = 600;
  Double_t h = 600;
  
  TCanvas* c2D = new TCanvas("Graph2D","Fit2D",w,h);
  c2D->SetWindowSize(w + (w - c2D->GetWw()), h + (h - c2D->GetWh()));
  T2Dplot->Draw("COLZ");
  /*std::vector<TGraph*> two90 = GetContour(c2D,T2Dplot,up90);
  for(TGraph* it : two90){
    it->Draw("L SAME");
    it->SetLineWidth(2);
    it->SetFillStyle(0);
    it->SetLineColor(kRed);
    }*/
  
  c2D->Update();

  TCanvas* c3D = new TCanvas("Graph3D","Fit3D",w,h);
  c3D->SetWindowSize(w + (w - c3D->GetWw()), h + (h - c3D->GetWh()));
  T3Dplot->Draw("COLZ");
  c3D->Update();
  
  app.Run();
  
  delete T2Dplot;
  delete T3Dplot;
     
  return 0;
}
